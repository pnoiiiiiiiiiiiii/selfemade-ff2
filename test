--// Services
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))

--// Variables
local MAX_EXECUTION_TIME = 10
local RETRY_INTERVAL = 0.4
local MAX_RETRIES = 10
local Hooks = {}
local HANDSHAKE_ARGS = nil
local SHUFFLE_FUNCTION = nil
local AC_STRING = nil
local Remote = ReplicatedStorage:WaitForChild("Remotes").CharacterSoundEvent

--// Functions
local function IsHandshakeArgs(Args)
    return (rawequal(Args[1], "\65\67\240\159\148\177")
    and rawequal(type(Args[2]), "table")
    and rawequal(rawlen(Args[2]), 19))
end

--> Retrieve Handshake Args
Hooks.Namecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local Method = getnamecallmethod()
    local Args = {...}

    if
        not checkcaller()
        and rawequal(self, Remote)
        and rawequal(Method, "fireServer")
        and IsHandshakeArgs(Args)
    then
        if not HANDSHAKE_ARGS and not AC_STRING then
            HANDSHAKE_ARGS = Args[2]
            AC_STRING = Args[1]
        else
            return coroutine.yield()
        end
    end

    return Hooks.Namecall(self, ...)
end))

--> Wait for HANDSHAKE_ARGS
while not HANDSHAKE_ARGS do
    task.wait()
end

--> Delay
task.wait(1)

--> Shuffle Function Grabber
for Index, Function in pairs(getgc()) do
    if type(Function) == 'function' and debug.getinfo(Function).source:find("PlayerModule.LocalScript") then
        if debug.getinfo(Function).numparams == 6 then
            if not SHUFFLE_FUNCTION then
                SHUFFLE_FUNCTION = Function
            end
        end
    end
end

local shit = function()
   return Remote:fireServer(AC_STRING, HANDSHAKE_ARGS, nil)
end

--> Replicate Handshake
task.spawn(function()
    local RETRIES = 0
    local TIME = os.clock()

    while RETRIES < MAX_RETRIES do
        local Success, Error = pcall(shit)

        if Success then
            RETRIES = 0
        else
            RETRIES = RETRIES + 1
            warn("Bypass timed out.")
        end

        task.wait(RETRY_INTERVAL)
    end

    warn("Bypass timed out.")
end)

--> Lag Bypass
task.spawn(function()
    for Index, Value in getgc() do
        if type(Value) == 'function' and getinfo(Value).source:find("PlayerModule.LocalScript") then
            for Index2, Value2 in getconstants(Value) do
                if Value2 == 4000001 then
                    setconstant(Value, Index2, 1)
                end
                
                if Value2 == 20.03 then
                    setconstant(Value, Index2, 100)
                    --warn("Spoofed.")
                end
                
                if Value2 == 50.03 then
                    setconstant(Value, Index2, 100)
                    --warn("Spoofed.")
                end
            end
        end
    end
end)

local old = nil;
old = hookfunction(getrenv().delay, function(...)
    local time = select(1, ...)
    if time == 0.4 then
        local crashfunc = select(2, ...)
        if type(crashfunc) == "function" then
            if (#debug.getupvalues(crashfunc) == 2) and (string.len(debug.info(crashfunc, "n")) == 0) then
                return wait(9e9)
            end
        end
    end
    return old(...)
end)

-- > Hook the SHUFFLE_FUNCTION
if SHUFFLE_FUNCTION then
    local Old
    Old = hookfunction(SHUFFLE_FUNCTION, function(p1, p2, p3, p4, p5, p6)
        if rawequal(p2, 668) and rawequal(p3, 670) and rawequal(p4, 751) and rawequal(p5, 671) and rawequal(p6, 791) then
            return
        elseif rawequal(p2, 686) and rawequal(p3, 788) and rawequal(p4, 811) and rawequal(p5, 880) and rawequal(p6, 785) then
            return
        elseif rawequal(p2, 859) and rawequal(p3, 775) and rawequal(p4, 751) and rawequal(p5, 671) and rawequal(p6, 664) then
            return
        elseif rawequal(p2, 764) and rawequal(p3, 699) and rawequal(p4, 751) and rawequal(p5, 671) and rawequal(p6, 774) then
            return
        elseif rawequal(p2, 811) and rawequal(p3, 777) and rawequal(p4, 751) and rawequal(p5, 690) and rawequal(p6, 784) then
            return
        elseif rawequal(p2, 898) and rawequal(p3, 892) and rawequal(p4, 811) and rawequal(p5, 671) and rawequal(p6, 781) then
            return
        elseif rawequal(p2, 887) and rawequal(p3, 782) and rawequal(p4, 780) and rawequal(p5, 648) and rawequal(p6, 659) then
            return
        end

        return Old(p1, p2, p3, p4, p5, p6)
    end)
else
    warn("Bypass timed out.")
end

task.wait(1.2)

--> Hook AC Script
for INDEX, VALUE in pairs(getgc()) do
    if type(VALUE) == "function" then
        if getinfo(VALUE).source:find("PlayerModule.LocalScript") then
            hookfunction(VALUE, function() end)
        end
    end
end
