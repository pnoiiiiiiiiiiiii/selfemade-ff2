local library = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ShaddowScripts/Main/main/Library"))()
local Main = library:CreateWindow("selfmade hoopz (beta)","Crimson")

local tab = Main:CreateTab("MAIN 1")
local tab2 = Main:CreateTab("MAIN 2")

--main 1 buttons
tab:CreateButton("camlock",function()
print("clicked")
end)



tab:CreateButton("silent aim",function()
print("clicked")
end)


tab:CreateButton("BALL MAG (getting fixed)",function()
print("clicked")
end)


tab:CreateButton("BALL REACH(gtting fixed)",function()
print("clicked")
end)


tab:CreateButton("anti travel",function()
local bool = true -- Set 'bool' to 'true' to disable travel

local mt = getrawmetatable(game)
local namecall = mt.__namecall
setreadonly(mt, false)
mt.__namecall = function(self, ...)
    local args = { ... }
    local method = getnamecallmethod()

    if tostring(self) == "shootingEvent" and method == "FireServer" and args[1] == "xd" then
        if bool == false then
            args[1] = "xd"
            return self.FireServer(self, unpack(args))
        elseif bool == true then
            return
        end
    end
    return namecall(self, ...)
end
end)


tab:CreateButton("anti fall",function()
 _G.antiFall = true -- Set it to true to enable anti-fall by default

spawn(function()
    game:GetService("Players").LocalPlayer.Character.Humanoid:GetPropertyChangedSignal('PlatformStand'):Connect(function()
        if game:GetService("Players").LocalPlayer.Character.Humanoid.PlatformStand == true and not _G.antiFall == true then
            return;
        end
        game:GetService("Players").LocalPlayer.Character.Humanoid.PlatformStand = false
        game:GetService("Players").LocalPlayer.Character.Humanoid.AutoRotate = true
    end)
end)

end)

tab2:CreateButton("force view stats",function()
 local Players = game:GetService("Players")

-- Function to update AllowViewCard for a specific player
local function updateAllowViewCard(player)
    if player:FindFirstChild("Configuration") then
        local allowViewCard = player.Configuration:FindFirstChild("AllowViewCard")
        if allowViewCard then
            allowViewCard.Value = true
        end
    end
end

-- Continuously update AllowViewCard for all players, including new ones
while true do
    local allPlayers = Players:GetPlayers()
    for _, player in pairs(allPlayers) do
        updateAllowViewCard(player)
    end

    -- Wait for a short period to avoid excessive updates
    wait(5)  -- Adjust the wait time as needed
end
end)
